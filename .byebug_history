continue
dimension_scores[:lrst]['score']
dimension_scores[:lrst]
total_score(dimension_scores)
dimension_scores
exit
factor[domain][form_type.to_sym]
form_type
factor[domain][form_type]
factor[domain]
factor
exit
calculate_factor(score, factor)
factor = factors[key][domain][form_type]
factors
factors = build_factor_klass::TRANSFORMATION_FACTORS
factor = factors[key][domain][form_type]
build_factor_klass::TRANSFORMATION_FACTORS
form_type
domain
key
score
exit
(calculate_for_form_type(question_numbers) / question_numbers.count).to_f
11 / 8
question_numbers.count
calculate_for_form_type(question_numbers)
question_numbers
exit
Question.where(number: question_numbers, form_type: FormType.find_by(name: @form_type)).pluck(:id)
question_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Question.where(number: question_numbers, form_type: FormType.find_by(name: @form_type)).pluck(:id)
question_number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
forms[@form_type.to_sym]
forms
froms
exit
options_module
category
exit
@response_value
response_value
@answer
category[:multipliers]['sometimes']
category[:multipliers]['always']
category[:multipliers][:always]
category[:multipliers]
category[multipliers]
category
exit
question_multipliers
exit
multiplier
exit
questionnaire_name.capitalize
questionnaire_name
questionnaire_name.camelize
module_name
exit
module_name.constantize
exit
"Clasifications::Responses::FRPEOptions".constantize
module_name.constantize
module_name
continue
module_name
exit
@questionnaire_name
continue
@questionnaire_name
@response_value
@question_number
@form_type
continue
@user.valid?
@user.persisted?
@user
continue
exception
continue
form_type.id
form_type
exit
@brp_id
next
@employee_profile_id
next
parameters[:brp_id]
parameters[:employee_profile_id]
continue
parameters[:parameters][:employee_profile_id]
parameters[:parameters]
parameters
parameters[:employee_profile_id]
continue
params.permit(:brp_id, :file, :employee_profile_id)
params.permit(:brp_id)
params[:brp_id]
params[:employee_profile_id]
params
continue
parameters
continue
FormType.find_by(name: @form_type_value).name
FormType.find_by(name: @form_type_value)
exit
e.valid?
e.valid
e = EmployeeProfile.create(user_id: @user.id, company_id: @company.id)
EmployeeProfile.create(user_id: @user.id, company_id: @company.id)
@company
@user
continue
employee_profile.form_type_id
question.form_type_id
continue
exception
continue
exception
exit
      Response.new(
        brp:,
        question:,
        employee_profile:,
        answer: @params[:answer]
      )
question.text
question
brp
continue
Brp.create!(@params)
next
params
exit
exception.model
exception.errors
exception.record
exception
continue
Brp.find(@brp_id).take!
Brp.find(@brp_id)
Brp.find!(@brp_id)
Brp.find(@brp_id)
continue
Question.find(@params[:question_id])
Question.find(@params[:question_id]).take!
Question.find!(@params[:question_id])
Brp.find!(@params[:brp_id])
brp = Brp.find!(@params[:brp_id])
continue
employee_profile
brp
question_id
question
exit
questions
exit
question
next
questionnaire
form_type
exit
form_type_id
questionnaire.id
number
continue
exit
@employee
exit
@employee
continue
params[:id]
params
query
params
continue
exception.message
exception.model
exception.code
exception
continue
exception.code
exception.field
exception.message
exception.errors
exception.record
exception
continue
@employee.persisted?
@employee
continue
create_employee_profile
@employee.persited?
@employee
continue
exception
continue
exception
exception.record
exception.record.errors.messages
continue
DetailedValidationError.new(exception.record.errors.messages, exception.record.class.name.underscore)
continue
exception.record.errors.messages
continue
exception.record.errors.messages
exception.record.errors
exception.record
exception
continue
exception
continue
exception
exit
exception = ExceptionError.new(exception.record.errors.messages, exception.record.class.name.underscore)
exception.model
exception.record.errors.first.model
exception.record.errors.first
exception.record.errors
exception = DetailedValidationError.new(exception.record.errors.messages, exception.record.class.name.underscore)
exception.is_a?(ActiveRecord::RecordInvalid)
exception.record.class.name.underscore
exception.record.errors
exception.record
exception.record.errors.messages
exception.record.errors
exception
exception.message
continue
exception.message
continue
exception.message
exception.code
exception.message
exception.messages
exception.model
exception
User.new(@user_parameters).valid?
continue
exception
exit
exception
raise exception
exit
exception
exit
eexit
exception.model
exception.message
exception.messages
exception.code
exception.all
exception
exit
exception.with_message
exception.meesages
